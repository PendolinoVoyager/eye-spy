searchState.loadedDescShard("c_linked_list", 0, "This crate provides utilities for working with …\nWraps a C linked list comprised of const pointers between …\nIterator over a <code>CLinkedListConst</code>. Returns immutable …\nWraps a C linked list comprised of mutable pointers …\nIterator over a <code>CLinkedListMut</code>. Returns references to the …\nIterator over a <code>CLinkedListMut</code>. Returns mutable references …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>CLinkedListMut</code> by wrapping a C linked list. …\nConstruct a <code>CLinkedListConst</code> by wrapping a C linked list. …\nProvides a reference to the front element in the list, or …\nProvides a reference to the front element in the list, or …\nProvides a mutable reference to the front element in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the list is empty.\nReturns <code>true</code> if the list is empty.\nIterate over the linked list, returning references to the …\nIterate over the linked list, returning immutable …\nIterate over the linked list, returning mutable references …\nCalculates the length of the list. This is an <code>O(n)</code> …\nCalculates the length of the list. This is an <code>O(n)</code> …")